name: api_yamdb workflow

on: [push]

jobs:

  # Job №1 - проверка кода на соответствие PEP8 и запуск pytest
  tests:
    # «Раннер» — создание изолированного окружения с последней версией Ubuntu
    runs-on: ubuntu-latest

    steps:
    # Запуск готового скрипта actions checkout для клонирования репозитория
    - uses: actions/checkout@v2
    
    # Шаг 1 : Установка питона (Set up Python)
    - name: Set up Python
      uses: actions/setup-python@v2 # запуск готового скрипта
      with:
        python-version: 3.7
        
    # Шаг 2 : Установка зависимостей (Install dependencies)
    - name: Install dependencies
      run: | 
        # апгрейд пыпы
        python -m pip install --upgrade pip
        # установка flake8 
        pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort pytest
        # установка зависимостей проекта
        pip install -r api_yamdb/requirements.txt 
        
    # Шаг 3 : Покрытие тестами 
    - name: Test with flake8 and django tests
      run: |
        # запуск проверки проекта по flake8
        python -m flake8 
        pytest
        # перейди в папку с manage.py и запусти тесты проекта
        # cd api_yamdb/
        # python manage.py test

  # Job №2 - сборка образа для контейнера с проектом (web) и пуш его на докерхаб
  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests # сначала выполни жоб tests
    
    steps:
    
      # Шаг 1 : Проверка доступности репозитория Docker Hub для workflow
      - name: Check out the repo
        uses: actions/checkout@v2 # скрипт
        
      # Шаг 2 : Вызов сборщика контейнеров docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1 # скрипт
        
      # Шаг 3 : Авторизация на Docker Hub
      - name: Login to Docker 
        uses: docker/login-action@v1 # скрипт
        with: # Используем "секретки" созданные на гите в Actions
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      # Шаг 4 : Пуш образа в Docker Hub 
      - name: Push to Docker Hub
        uses: docker/build-push-action@v2 # скрипт
        with:
          file: api_yamdb/Dockerfile # адрес где лежит докерфайл
          context: api_yamdb/
          push: true
          tags: andreibo87/api_yamdb:latest # адрес репо на DH, куда пушим

  # Job 3 - автоматический деплой проекта на боевой сервер
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    if: github.ref == 'refs/heads/master' || 'refs/heads/main'

    steps:

      # Шаг 1 : Выполнить необходимые для деплоя команды
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master # скрипт
        with: # Используем "секретки" созданные на гите в Actions
          host: ${{ secrets.HOST }} # IP-адрес вашего сервера
          username: ${{ secrets.USER }} # имя пользователя для подключения к серверу
          key: ${{ secrets.SSH_KEY }} # SSH ключ для подключения к серверу
          passphrase: ${{ secrets.PASSPHRASE }} # кодовое слово, если необходимо

          # запускаем скрипт
          script: |
            sudo docker-compose stop
            sudo docker-compose rm web
            touch .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            sudo docker-compose up -d 
